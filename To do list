#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TASKS 100
#define MAX_LENGTH 100

// Structure to store a task
struct Task {
    int id;
    char description[MAX_LENGTH];
};

// Function prototypes
void addTask(struct Task tasks[], int *taskCount);
void viewTasks(struct Task tasks[], int taskCount);
void deleteTask(struct Task tasks[], int *taskCount);

int main() {
    struct Task tasks[MAX_TASKS];
    int taskCount = 0;
    int choice;

    while (1) {
        printf("\n--- To-Do List ---\n");
        printf("1. Add Task\n");
        printf("2. View Tasks\n");
        printf("3. Delete Task\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addTask(tasks, &taskCount);
                break;
            case 2:
                viewTasks(tasks, taskCount);
                break;
            case 3:
                deleteTask(tasks, &taskCount);
                break;
            case 4:
                printf("Exiting program. Goodbye!\n");
                return 0;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
}

// Function to add a task
void addTask(struct Task tasks[], int *taskCount) {
    if (*taskCount >= MAX_TASKS) {
        printf("Task limit reached. Cannot add more tasks.\n");
        return;
    }
    struct Task newTask;
    newTask.id = *taskCount + 1;

    printf("Enter task description: ");
    getchar();  // to clear the newline character from the input buffer
    fgets(newTask.description, MAX_LENGTH, stdin);
    newTask.description[strcspn(newTask.description, "\n")] = 0;  // Remove newline character

    tasks[*taskCount] = newTask;
    (*taskCount)++;

    printf("Task added successfully!\n");
}

// Function to view all tasks
void viewTasks(struct Task tasks[], int taskCount) {
    if (taskCount == 0) {
        printf("No tasks to display.\n");
        return;
    }
    printf("\n--- To-Do List ---\n");
    for (int i = 0; i < taskCount; i++) {
        printf("ID: %d, Description: %s\n", tasks[i].id, tasks[i].description);
    }
}

// Function to delete a task
void deleteTask(struct Task tasks[], int *taskCount) {
    if (*taskCount == 0) {
        printf("No tasks to delete.\n");
        return;
    }

    int id;
    printf("Enter the ID of the task to delete: ");
    scanf("%d", &id);

    int found = 0;
    for (int i = 0; i < *taskCount; i++) {
        if (tasks[i].id == id) {
            found = 1;
            for (int j = i; j < *taskCount - 1; j++) {
                tasks[j] = tasks[j + 1];
            }
            (*taskCount)--;
            printf("Task deleted successfully!\n");
            break;
        }
    }
    if (!found) {
        printf("Task with ID %d not found.\n", id);
    }
}
